app_dir = "{{ redmine_glob_root_dir }}/{{ redmine_inst_dir }}"
working_directory app_dir
pid "{{ unicorn_pid_file }}"

preload_app true
timeout {{ unicorn_timeout }}
worker_processes {{ unicorn_worker_processes }}

# Log files
stderr_path "{{ unicorn_log_dir }}/unicorn.stderr.log"
stdout_path "{{ unicorn_log_dir }}/unicorn.stdout.log"

GC.respond_to?(:copy_on_write_friendly=) and GC.copy_on_write_friendly = true

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!

  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = "#{server.config[:pid]}.oldbin"

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket
  #start the worker on port 4000, 4001, 4002 etc...
  addr = "{{ unicorn_listen_address }}:#{ {{ unicorn_listen_port }} + worker.nr}"
  # infinite tries to start the worker
  server.listen(addr, :tries => 10, :delay => 5, :backlog => 128)

end





