#!/bin/bash

CONTAINER_XML_HEAD={{ smartgears_user_home }}/.containerxml/1-container.xml
SCOPES_FILE={{ smartgears_user_home }}/.containerxml/2-container.xml
CONTAINER_XML_TAIL={{ smartgears_user_home }}/.containerxml/3-container.xml
LOCAL_LIB=/usr/local/lib
LOCAL_ETC=/usr/local/etc
LOG_PREFIX="get-scopes: "

CONTAINER_XML_FILE={{ smartgears_install_path }}/container.xml

RETVAL=

SCOPES_LIST=""
if [ -f $LOCAL_ETC/scopes.list ] ; then
    . $LOCAL_ETC/scopes.list
else
    logger "$LOG_PREFIX There is no token list, aborting"
    exit 1
fi
    

if [ $# -ne 1 ] ; then
    echo "The token must be passed as the sole argument"
    logger "$LOG_PREFIX The token must be passed as the sole argument"
    exit 1
fi
TOKEN=$1

{%if setup_nginx %}
{%if https_port is defined %}
{% if http_redirect_to_https is defined and http_redirect_to_https %}
HTTP_PORT={{ https_port }}
{% else %}
HTTP_PORT={{ http_port }}
{% endif %}
{% else %}
{%if http_port is defined %}
HTTP_PORT={{ http_port }}
{% endif %}
{% endif %}
{% else %}
HTTP_PORT={{ item.http_port }}
{% endif %}

for jar in $( ls -1 /home/gcube/tomcat/lib/ ) ; do
    export CLASSPATH="/home/gcube/SmartGears/lib/${jar}:$CLASSPATH"
done

cd $LOCAL_LIB

java TokenGenerator {{ smartgears_hostname }} $TOKEN $HTTP_PORT $SCOPES_FILE $SCOPES_LIST
RETVAL=$?
if [ $RETVAL -eq 0 ] ; then
    logger "$LOG_PREFIX We got the scope tokens"
else
    logger "$LOG_PREFIX Unable to obtain the scope tokens, aborting"
    exit 1
fi

# Now that we have the tokens, we can assemble the container.xml file
cat $CONTAINER_XML_HEAD $SCOPES_FILE $CONTAINER_XML_TAIL > $CONTAINER_XML_FILE
chmod 440 $CONTAINER_XML_FILE
logger "$LOG_PREFIX $CONTAINER_XML_FILE updated"

exit 0
