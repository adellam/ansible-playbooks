#!/usr/bin/env python
import glob
import json

import tempfile
import filecmp
import os
import re

def main():
    module = AnsibleModule(
        argument_spec = dict(
            path=dict(required=True),
            key=dict(required=True),
            value=dict(required=True),
            syntax=dict(required=False, choices=['standard', 'shell'], default='standard'),
            )
        )

    path = module.params['path']
    syntax = module.params['syntax']
    key = module.params['key']
    value = module.params['value']

    found = [False]

    def expand(line):
        if syntax == 'standard':
            if re.match("[ #]*%s *=.*" % (key), line):
                found[0] = True
            return re.sub("[ #]*%s *=.*" % (key), "%s = %s" % (key, value), line)
        elif syntax == 'shell':
            if re.match("[ #]*%s *=.*" % (key), line):
                found[0] = True
            return re.sub("[ #]*%s *=.*" % (key), "%s=%s" % (key, value), line)
        else:
            raise Exception("unsupported syntax %s" % syntax)

    changed = False

    with open(path) as input:
        with tempfile.NamedTemporaryFile(dir=os.path.dirname(path)) as temp:
            for line in input:
                print >>temp, expand(line),

            if not found[0]:
                if not line.endswith('\n'):
                    print >>temp, ''
                if syntax == 'standard':
                    print >>temp, "%s = %s" % (key, value)
                elif syntax == 'shell':
                    print >>temp, "%s=%s" % (key, value)
                else:
                    raise Exception("unsupported syntax %s" % syntax)

            temp.delete = False
            temp.close()

            changed = not filecmp.cmp(path, temp.name)
            if changed:
                os.rename(temp.name, path)
            else:
                os.remove(temp.name)

    module.exit_json(changed=changed)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
